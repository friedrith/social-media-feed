import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'

import User, { UserAuth } from 'interfaces/User'
import type { AppState, AppThunk } from 'services/store'
import { persistUser, loadUser } from './userLocalStorage'
import * as userApi from './userApi'

export interface UsersState {
  currentUser: null | User
}

const initialState: UsersState = {
  currentUser: null,
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const login = createAsyncThunk(
  'user/login',
  async ({ email, password }: UserAuth) => {
    const user = await userApi.login({ email, password })
    persistUser(user)
    return user
  }
)

export const logout = createAsyncThunk('user/logout', async () => {
  // const response = await fetchCount(amount)
  // // The value we return becomes the `fulfilled` action payload
  // return response.data

  return
})

export const usersSlice = createSlice({
  name: 'users',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: builder => {
    builder
      .addCase(login.pending, state => {})
      .addCase(login.fulfilled, (state, action) => {
        state.currentUser = action.payload
      })

    builder
      .addCase(logout.pending, state => {})
      .addCase(logout.fulfilled, (state, action) => {
        state.currentUser = null
      })
  },
})

export const getCurrentUser = (state: AppState) => state.users.currentUser

export default usersSlice.reducer
